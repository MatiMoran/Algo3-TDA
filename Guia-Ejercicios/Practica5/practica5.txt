Práctica 5: Recorrido mínimo

1) st-eficientes
    Dado un digrafo D con pesos c : E(D) → N y dos vértices s y t, decimos que una arista v → w es st-eficiente cuando v → w pertenece a algún 
    camino mínimo de s a t. Sea d(·, ·) la función que indica el peso de un camino mínimo entre dos vértices.

    (a) Demostrar que v → w es st-eficiente si y sólo si d(s, v) + c(v → w) + d(w, t) = d(s, t).

        ->) supongamos que v->w es st-eficiente. Esto significa que v->w pertenece a algún camino mínimo de s y t, lo que implica que 
        d(s,t) = d(s,v) + d(v,w) + d(w,t), lo cual es consecuencia directa de que v->w está en camino mínimo de s a t.

        <-) supongamos que d(s,v) + c(v->w) + d(w,t) = d(s,t). Para ver que v->w es st-eficiente, necesitamos ver que está en un camino mínimo
        de s a t.
        Podemos descomponer los tramos de s,v y w,t si no es camino mínimo entonces existiría un dalt(s,t) < d(s,t) lo que contradice la hipótesis,
        luego v->w es st-eficiente.

    (b) Usando el inciso anterior, proponga un algoritmo eficiente que encuentre el mínimo de los caminos entre s y t que no use aristas 
    st-eficientes. Si dicho camino no existe, el algoritmo retorna ⊥.

        1. Ejecuta Dijkstra en D desde s para calcular d(s,v) para todo v.
        2. Ejecuta Dijkstra en D complemento desde t para calcular d(w,t) para todo w (D complemento es dar vuelta todas las aristas)
        3. Para c/ arista v->w en D verifica d(s,v) + c(v->w) + d(w,t) = d(s,t)
        4. Las aristas que cumplan se sacan.
        5. Corro Dijkstra otra vez en D desde s a t y es el resultado.