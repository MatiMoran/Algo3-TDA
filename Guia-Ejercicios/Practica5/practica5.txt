Práctica 5: Recorrido mínimo

1) st-eficientes
    Dado un digrafo D con pesos c : E(D) → N y dos vértices s y t, decimos que una arista v → w es st-eficiente cuando v → w pertenece a algún 
    camino mínimo de s a t. Sea d(·, ·) la función que indica el peso de un camino mínimo entre dos vértices.

    (a) Demostrar que v → w es st-eficiente si y sólo si d(s, v) + c(v → w) + d(w, t) = d(s, t).

        ->) supongamos que v->w es st-eficiente. Esto significa que v->w pertenece a algún camino mínimo de s y t, lo que implica que 
        d(s,t) = d(s,v) + c(v → w) + d(w,t), lo cual es consecuencia directa de que v->w está en camino mínimo de s a t.

        <-) supongamos que d(s,v) + c(v->w) + d(w,t) = d(s,t). Para ver que v->w es st-eficiente, necesitamos ver que está en un camino mínimo
        de s a t.
        Podemos descomponer los tramos de s,v y w,t si no es camino mínimo entonces existiría un dalt(s,t) < d(s,t) lo que contradice la hipótesis,
        luego v->w es st-eficiente.
        No puede existir un camino más corto de s a t que no pase por v->w, ya que eso contradiría la definición de d(s, t) como el peso de 
        un camino mínimo. La idea es que bajo esta condición, cualquier desviación aumentaría el costo total del camino, asegurando que v->w debe 
        ser parte de un camino mínimo.

    (b) Usando el inciso anterior, proponga un algoritmo eficiente que encuentre el mínimo de los caminos entre s y t que no use aristas 
    st-eficientes. Si dicho camino no existe, el algoritmo retorna ⊥.

        1. Ejecuta Dijkstra en D desde s para calcular d(s,v) para todo v.
        2. Ejecuta Dijkstra en D complemento desde t para calcular d(w,t) para todo w (D complemento es dar vuelta todas las aristas)
        3. Para c/ arista v->w en D verifica d(s,v) + c(v->w) + d(w,t) = d(s,t)
        4. Marcar estas aristas como no elegibles para el cálculo de la ruta mínima en el siguiente paso.
        5. Corro Dijkstra otra vez en D desde s a t y es el resultado.  Antes de hacer esto, necesito asegurarme de que el grafo ha sido modificado para reflejar 
        la exclusión (o la no elección) de las aristas st-eficientes. Esto podría implicar ajustar el algoritmo de Dijkstra para que ignore estas 
        aristas marcadas durante su ejecución.
    
2) Arista max en ruta de peso c
    Diseñar un algoritmo eficiente que, dado un digrafo G con pesos no negativos, dos vértices s y t y una cota c, determine una arista de peso 
    máximo de entre aquellas que se encuentran en algún recorrido de s a t cuyo peso (del recorrido, no de la arista) sea a lo sumo c. 
    Demostrar que el algoritmo propuesto es correcto.

        Algoritmo:
            1. Dijkstra desde s en G para calcular d(s,v) para todo v con arista menor a c. (ya que los pesos son positivos)
            2. Dijkstra desde t en G con las aristas invertidas para calcular d(w,t) para todo w con arista menor a c. (ya que los pesos son positivos)
            3. Ordenar todas las aristas (v,w) según peso decreciente.
            4. Para cada arista ordenado: si d(s,v) + c(v,w) + d(w,t) <= c devolver arista.
            5. Devolver null.
        
        Demostración:
            - El algoritmo devuelve la arista que cumple con los criterios, en 4 se itera todas las aristas y si se cumple la condición devuelve
            arista, me asegura que es max ya que está ordenado y empiezo a recorrer desde los de más alto valor.
            - El algoritmo termina y no deja ningún arista sin verificar, examina cada arista exactamente 1 vez y Dijkstra me garantiza que las
            distancias son correctos sin pasar por alto ninguno, termina cuando encuentra o recorre todos.

3) Max 1 arista negativa
    Diseñar un algoritmo eficiente que, dado un digrafo pesado G y dos vértices s y t, determine el recorrido minimo de s a t que pasa por a lo 
    sumo una arista de peso negativo. 
    Demostrar que el algoritmo propuesto es correcto.

        Antes del algoritmo preparamos un G' que es un subgrafo de G sin aristas negativas.
        Algoritmo:
            1. Inicializamos dos estructuras para G', uno para d_G'(s,v) o otro para d_G'(v,t) para todos v en V.
            2. Ejecutamos Dijkstra dos veces, una desde s en G' y otra en t en G' con aristas invertidas.
            3. Inicializo variable minDist en infinito para el seguimiento del camino mínimo.
            4. Para c/arista en G donde c(v,w) < 0 verifica si la suna de d_G'(s,v) + c(v,w) + d_G'(w,t) es menor que "minDist", si lo es,
            actualizo y sigo recorriendo.
            5. Finalmente hago min(d_G'(s,t), minDist) y reconstuyo el camino mínimo que resulte.
            
            Complejidad: Dijkstra tiene una complejidad de O((V+E) log V) usando un montículo de Fibonacci. Entonces, ejecutarlo dos veces 
            sería O(2(V+E) log V) y revisar todas las aristas negativas añade O(E) en el peor caso. Así que sería (O((V+E) log V + E)), 
            considerando V vértices y E aristas en total.

            Para reconstruir el camino mínimo una vez encontrado:
                Durante la ejecución de Dijkstra: mantiene un arreglo de predecesores para cada nodo. Es decir, para cada nodo v, guarda el nodo 
                previo u en el camino mínimo desde s a v (y similarmente para el camino de t a v con las aristas invertidas).
                
                Al encontrar el camino mínimo que incluye una arista negativa: Si el camino mínimo pasa por una arista negativa (v, w), entonces 
                hay que combinar tres partes:
                    - El camino desde s a v utilizando el arreglo de predecesores desde s.
                    - La arista negativa (v, w).
                    - El camino desde w a t, que se obtiene invirtiendo el camino reconstruido desde t a w usando el arreglo de predecesores 
                    hacia t.

        Demostración:
            - Corrección parcial: caminos mínimos en G', al usar Dijkstra nos garantiza los subcaminos minimos de s hacia todos los nodos, y
            desde cualquier nodo hacia t. Ya que en G' no hay aristas de peso negativo.
            - Corrección global: vemos el caso de los caminos que usan una arista negativa, checkeando todas las aristas negativas en función de 
            los subcaminos mínimos calculados en G' (sin arista negativos) 
            - Finalmente, comparamos el minimo entre no usar arista negativa con una solo 1 arista negativa.

4) Aristas que mejoran
    Sea G un digrafo con pesos positivos que tiene dos vértices especiales s y t. Para una arista e ̸∈ E(G) con peso positivo, definimos G + e 
    como el digrafo que se obtiene de agregar e a G. Decimos que e mejora el camino de s a t cuando dG (s, t) > dG+e (s, t). 
    Diseñar un algoritmo eficiente que, dado un grafo G y un conjunto de aristas E ̸∈ E(G) con pesos positivos, determine cuáles aristas de E 
    mejoran el camino de s a t en G. 
    Demostrar que el algoritmo es correcto.

        Algoritmo:
            1. Inicio un conjunto para guardar las aristas que mejoran.
            2. Ejecuto Dijkstra en G para encontrar d(s,t).
            3. Para cada arista e en E (que son de pesos positivos), la agrego al grafo G generando el grafo G+e y ejecuto Dijkstra.
            Si dG+e(s,t) < d(s,t) lo agrego al conjunto que mejora.
            4. Saco la arista e del grafo y sigo recorriendo el conjunto E.

            Complejidad: O(|E| * min(n², m log(n))) ya que hago Dijkstra |E| veces.

        (alternativa mejor): si calculamos d(s,v) y d(v,w) para todos los nodos v en G reduce drasticamente la cantidad de ejecución de Dijkstra.
                            Entonces por cada arista de E, al tener los dos extremos y el costo, calcular el CM de dG+e(s,t) es O(1) ya que es 
                            una cuenta y no es necesario la inserción/sacado de la arista en sí. 
        
        Demostración: pruebo cada arista de |E| y veo si mejora el camino minimo.

5) Aristas críticas
    Sea G un digrafo con pesos positivos que tiene dos vértices especiales s y t. Decimos que una arista e ∈ E(G) es crítica para s y t cuando 
    dG (s, t) < dG−e (s, t). Diseñar un algoritmo eficiente que, dado G, determine las aristas de G que son críticas para s y t. 
    Demostrar que el algoritmo es correcto. Ayuda: pensar en el subgrafo P de G que está formado por las aristas de caminos mínimos de G 
    (el "grafo de caminos mínimos").

        Algoritmo:
            1. Ejecuto Dijkstra de s a t para obtener d(s,v) para todos los v en G.
            2. Ejecuto Dijkstra de t a s con las aristas invertidas para obtener d(v,t) para todos los v en G.
            3. Para cada arista de G, recorremos verificando la ecuación de d(s,v) + c(v->w) + d(w,t) = d(s,t). Las aristas que cumplen serán
            posibles aristas críticas. Usamos esta info para construir un subgrafo P que consiste exclusivamente en las aristas que forman parte 
            de algún camino mínimo de s a t. Todas las aristas de P son candidatas a ser críticas, la razón es que, por definición, si una arista 
            no está en un camino mínimo desde s a t, su eliminación no puede afectar la distancia mínima entre estos dos puntos.
            4. Usamos la propiedad de los predecesores/sucesores, para cada arista (v, w) en el camino mínimo, mira si existe otra ruta de v a w 
            que no sea más larga que la arista original. Esto puede hacerse manteniendo y consultando una estructura de datos que almacene caminos 
            alternativos y sus respectivos pesos durante la construcción de P. Si no existe tal ruta alternativa, entonces la arista es crítica.

            (optimización): Para evitar la reconstrucción del grafo y la repetición de Dijkstra, se puede precalcular y almacenar las distancias 
            mínimas entre todos los pares de vértices usando el algoritmo de Floyd-Warshall o repetir Dijkstra desde cada vértice. Aunque esto 
            tiene una complejidad temporal mayor (O(n³) para Floyd-Warshall y O(n*m\log(n)) para Dijkstra repetido), te permite responder 
            inmediatamente si la eliminación de cualquier arista aumentaría la distancia mínima de s a t. Esta estrategia es especialmente útil 
            si el grafo no cambia frecuentemente y se hacen muchas consultas sobre aristas críticas.
        
        Demostración: las aristas que cumplen con la ecuación pertenecen a algún camino minimo. Como pueden haber varios caminos mínimos, esto no
        significa que al removerse pasaría que dG(s,t) < dG-e(s,t). Entonces pueden pasar los siguientes casos:
            1. Al removerla existe otro camino minimo de mismo peso.
            2. Al remover existe otro camino de mayor peso.
            3. No hay otro camino y st quedan en dos componentes conexas.

6) Pesos probabilisticos
    No se incluye un ejercicio en particular de este tema debido a que Estadística Computacional no es correlativa con TDA. :)